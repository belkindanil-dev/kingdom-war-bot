import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

class Kingdom:
    def __init__(self):
        self.resources = {'gold': 1000, 'food': 500, 'wood': 300, 'iron': 200}
        self.army = {'infantry': 10, 'archers': 5, 'knights': 2}
        self.buildings = {'farms': 1, 'mines': 1, 'barracks': 1}
        self.level = 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        user_data[user_id] = Kingdom()
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack")],
        [InlineKeyboardButton("üèó –°—Ç—Ä–æ–∏—Ç—å", callback_data="build")],
        [InlineKeyboardButton("üåæ –°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã", callback_data="collect")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ, –í–ª–∞—Å—Ç–µ–ª–∏–Ω!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    kingdom = user_data[user_id]
    
    status_text = f"""
üè∞ –¢–≤–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ (–£—Ä–æ–≤–µ–Ω—å {kingdom.level})

üíé –†–µ—Å—É—Ä—Å—ã:
- –ó–æ–ª–æ—Ç–æ: {kingdom.resources['gold']}
- –ï–¥–∞: {kingdom.resources['food']}
- –î–µ—Ä–µ–≤–æ: {kingdom.resources['wood']}
- –ñ–µ–ª–µ–∑–æ: {kingdom.resources['iron']}

‚öîÔ∏è –ê—Ä–º–∏—è:
- –ü–µ—Ö–æ—Ç–∞: {kingdom.army['infantry']}
- –õ—É—á–Ω–∏–∫–∏: {kingdom.army['archers']}
- –†—ã—Ü–∞—Ä–∏: {kingdom.army['knights']}

üèó –ó–¥–∞–Ω–∏—è:
- –§–µ—Ä–º—ã: {kingdom.buildings['farms']}
- –®–∞—Ö—Ç—ã: {kingdom.buildings['mines']}
- –ö–∞–∑–∞—Ä–º—ã: {kingdom.buildings['barracks']}
"""
    await query.edit_message_text(
        text=status_text,
        reply_markup=main_menu()
    )

async def attack_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üõ° –°–ª–∞–±–∞—è –∞—Ä–º–∏—è (50 –∑–æ–ª–æ—Ç–∞)", callback_data="attack_weak")],
        [InlineKeyboardButton("‚öîÔ∏è –°—Ä–µ–¥–Ω—è—è –∞—Ä–º–∏—è (150 –∑–æ–ª–æ—Ç–∞)", callback_data="attack_medium")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    await query.edit_message_text(
        text="‚öîÔ∏è –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏:\n–ó–∞ –ø–æ–±–µ–¥—É –ø–æ–ª—É—á–∏—à—å —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–æ–ª–æ—Ç–æ!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def process_attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    kingdom = user_data[user_id]
    attack_type = query.data
    
    rewards = {'attack_weak': {'gold': 100, 'food': 50}, 'attack_medium': {'gold': 250, 'food': 120}}
    cost = {'attack_weak': 50, 'attack_medium': 150}
    
    if kingdom.resources['gold'] >= cost[attack_type]:
        kingdom.resources['gold'] -= cost[attack_type]
        reward = rewards[attack_type]
        kingdom.resources['gold'] += reward['gold']
        kingdom.resources['food'] += reward['food']
        
        await query.edit_message_text(
            text=f"üéâ –ü–æ–±–µ–¥–∞!\n\n–¢—ã –ø–æ–±–µ–¥–∏–ª –≤—Ä–∞–∂–µ—Å–∫—É—é –∞—Ä–º–∏—é –∏ –ø–æ–ª—É—á–∏–ª:\nüí∞ +{reward['gold']} –∑–æ–ª–æ—Ç–∞\nüåæ +{reward['food']} –µ–¥—ã",
            reply_markup=main_menu()
        )
    else:
        await query.edit_message_text(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –∞—Ç–∞–∫–∏!",
            reply_markup=main_menu()
        )

async def build_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üåæ –§–µ—Ä–º–∞ (100 –¥–µ—Ä–µ–≤–∞)", callback_data="build_farm")],
        [InlineKeyboardButton("‚õè –®–∞—Ö—Ç–∞ (150 –¥–µ—Ä–µ–≤–∞)", callback_data="build_mine")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    await query.edit_message_text(
        text="üèó –í—ã–±–µ—Ä–∏ –∑–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def process_build(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    kingdom = user_data[user_id]
    build_type = query.data
    
    costs = {'build_farm': {'wood': 100}, 'build_mine': {'wood': 150}}
    building_names = {'build_farm': '—Ñ–µ—Ä–º—É', 'build_mine': '—à–∞—Ö—Ç—É'}
    
    if kingdom.resources['wood'] >= costs[build_type]['wood']:
        kingdom.resources['wood'] -= costs[build_type]['wood']
        building_key = build_type.replace('build_', '') + 's'
        kingdom.buildings[building_key] += 1
        
        await query.edit_message_text(
            text=f"üèó –¢—ã –ø–æ—Å—Ç—Ä–æ–∏–ª {building_names[build_type]}!",
            reply_markup=main_menu()
        )
    else:
        await query.edit_message_text(
            text="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞!",
            reply_markup=main_menu()
        )

async def collect_resources(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    kingdom = user_data[user_id]
    
    food_collected = kingdom.buildings['farms'] * 50
    gold_collected = kingdom.buildings['mines'] * 30
    
    kingdom.resources['food'] += food_collected
    kingdom.resources['gold'] += gold_collected
    
    await query.edit_message_text(
        text=f"üåæ –†–µ—Å—É—Ä—Å—ã —Å–æ–±—Ä–∞–Ω—ã!\n\n–° —Ñ–µ—Ä–º: +{food_collected} –µ–¥—ã\n–° —à–∞—Ö—Ç: +{gold_collected} –∑–æ–ª–æ—Ç–∞",
        reply_markup=main_menu()
    )

def main_menu():
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="attack")],
        [InlineKeyboardButton("üèó –°—Ç—Ä–æ–∏—Ç—å", callback_data="build")],
        [InlineKeyboardButton("üåæ –°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã", callback_data="collect")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üëë –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

def main():
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_TOKEN")
        return
    
    try:
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(show_status, pattern="^status$"))
        application.add_handler(CallbackQueryHandler(attack_menu, pattern="^attack$"))
        application.add_handler(CallbackQueryHandler(build_menu, pattern="^build$"))
        application.add_handler(CallbackQueryHandler(collect_resources, pattern="^collect$"))
        application.add_handler(CallbackQueryHandler(process_attack, pattern="^attack_"))
        application.add_handler(CallbackQueryHandler(process_build, pattern="^build_"))
        application.add_handler(CallbackQueryHandler(back_to_main, pattern="^back$"))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... üéÆ")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
