import random
import asyncio
import os
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN', '').strip()

if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å TELEGRAM_TOKEN –≤ Environment Variables")
    exit(1)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ ---
players = {}
active_duels = {}
pending_invites = {}
daily_quests = {}

class Player:
    def __init__(self, user_id, username):
        self.user_id = user_id
        self.username = username
        self.level = 1
        self.exp = 0
        self.crystals = 100
        self.wins = 0
        self.losses = 0
        self.rating = 1000
        self.sticker_sets = ["basic"]
        self.unlocked_stickers = {
            "basic": ["fireball", "icewall", "heal"],
            "lightning": [],
            "dark": [],
            "nature": []
        }

class Duel:
    def __init__(self, player1_id, player2_id, ranked=False):
        self.player1_id = player1_id
        self.player2_id = player2_id
        self.player1_hp = 10
        self.player2_hp = 10
        self.player1_choice = None
        self.player2_choice = None
        self.round = 1
        self.started_at = datetime.now()
        self.ranked = ranked

# --- –°—Ç–∏–∫–µ—Ä—ã-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è ---
STICKERS = {
    "fireball": {
        "name": "üî• –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä",
        "type": "attack",
        "power": 3,
        "description": "–ù–∞–Ω–æ—Å–∏—Ç 3 –µ–¥. —É—Ä–æ–Ω–∞",
        "set": "basic",
        "cost": 0
    },
    "icewall": {
        "name": "‚ùÑÔ∏è –õ–µ–¥—è–Ω–∞—è —Å—Ç–µ–Ω–∞", 
        "type": "defense",
        "power": 2,
        "counter_damage": 1,
        "description": "–ë–ª–æ–∫–∏—Ä—É–µ—Ç 2 —É—Ä–æ–Ω–∞, –Ω–∞–Ω–æ—Å–∏—Ç 1 –æ—Ç—Ä–∞–∂–µ–Ω–Ω—ã–π —É—Ä–æ–Ω",
        "set": "basic",
        "cost": 0
    },
    "heal": {
        "name": "üíö –¶–µ–ª–∏—Ç–µ–ª—å",
        "type": "heal",
        "power": 2,
        "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 2 HP",
        "set": "basic",
        "cost": 0
    }
}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    buttons = [
        [InlineKeyboardButton("‚öîÔ∏è –ù–∞–π—Ç–∏ –¥—É—ç–ª—å", callback_data='find_duel')],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data='invite_friend')],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("üîß –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫", callback_data='test')]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞ ---
def sticker_menu(player_id):
    player = players[player_id]
    available_stickers = []
    
    for sticker_id, sticker in STICKERS.items():
        if sticker["set"] in player.sticker_sets:
            available_stickers.append(sticker_id)
    
    selected_stickers = random.sample(available_stickers, min(3, len(available_stickers)))
    
    buttons = []
    for sticker_id in selected_stickers:
        sticker = STICKERS[sticker_id]
        buttons.append([InlineKeyboardButton(sticker["name"], callback_data=f'sticker_{sticker_id}')])
    
    return InlineKeyboardMarkup(buttons)

def get_or_create_player(user_id, username):
    if user_id not in players:
        players[user_id] = Player(user_id, username)
    return players[user_id]

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
    
    player = get_or_create_player(user_id, username)
    
    welcome_text = (
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **–ë–∏—Ç–≤—É –°—Ç–∏–∫–µ—Ä–æ–≤**!\n\n"
        "‚öîÔ∏è –≠—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∞—è –¥—É—ç–ª—å, –≥–¥–µ —Å—Ç–∏–∫–µ—Ä—ã - —Ç–≤–æ–µ –æ—Ä—É–∂–∏–µ!\n\n"
        "**–ü—Ä–∞–≤–∏–ª–∞:**\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞–π —Å—Ç–∏–∫–µ—Ä—ã-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–±–µ–¥–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ PvP –¥—É—ç–ª–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Å—è!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=main_menu())

# --- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ---
async def show_profile(query, player):
    profile_text = (
        f"üßô **–ü—Ä–æ—Ñ–∏–ª—å –º–∞–≥–∞**\n\n"
        f"üë§ –ò–≥—Ä–æ–∫: {player.username}\n"
        f"üìà –£—Ä–æ–≤–µ–Ω—å: {player.level}\n"
        f"‚≠ê –û–ø—ã—Ç: {player.exp}/100\n"
        f"üèÖ –†–µ–π—Ç–∏–Ω–≥: {player.rating}‚≠ê\n"
        f"üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: {player.crystals}\n"
        f"üèÜ –ü–æ–±–µ–¥: {player.wins}\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {player.losses}\n\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await query.edit_message_text(profile_text, reply_markup=main_menu())

# --- –ù–∞–π—Ç–∏ –¥—É—ç–ª—å ---
async def find_duel(query, player_id):
    player = players[player_id]
    
    # –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    for other_id, other_player in players.items():
        if other_id != player_id and other_id not in active_duels:
            duel_id = f"{player_id}_{other_id}"
            active_duels[duel_id] = Duel(player_id, other_id)
            
            await query.edit_message_text("‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å!")
            
            await context.bot.send_message(
                chat_id=other_id,
                text="‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å!",
                reply_markup=main_menu()
            )
            
            await start_duel_round(context, duel_id)
            return
    
    await query.edit_message_text(
        "‚è≥ –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞!",
        reply_markup=main_menu()
    )

# --- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ ---
async def invite_friend(query, player_id):
    player = players[player_id]
    invite_id = f"{player_id}_{datetime.now().timestamp()}"
    
    pending_invites[invite_id] = {
        "from_player": player_id,
        "to_player": None,
        "created_at": datetime.now()
    }
    
    invite_text = (
        f"üéØ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å**\n\n"
        f"–ò–≥—Ä–æ–∫ {player.username} –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫—É—é –¥—É—ç–ª—å!\n"
        f"–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É: `{invite_id}`\n\n"
        f"–î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
        f"`/accept {invite_id}`"
    )
    
    await query.edit_message_text(invite_text, reply_markup=main_menu())

# --- –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏ ---
async def accept_duel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `/accept –ö–û–î`")
        return
    
    invite_id = context.args[0]
    
    if invite_id not in pending_invites:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!")
        return
    
    invite = pending_invites[invite_id]
    from_player_id = invite["from_player"]
    
    if from_player_id == user_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
    duel_id = f"{from_player_id}_{user_id}"
    active_duels[duel_id] = Duel(from_player_id, user_id)
    
    del pending_invites[invite_id]
    
    from_player = players[from_player_id]
    
    await update.message.reply_text(f"‚úÖ –¢—ã –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ –æ—Ç {from_player.username}! –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å! ‚öîÔ∏è")
    
    await context.bot.send_message(
        chat_id=from_player_id,
        text=f"‚úÖ {username} –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π –≤—ã–∑–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å! ‚öîÔ∏è"
    )
    
    await start_duel_round(context, duel_id)

# --- –ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞ –¥—É—ç–ª–∏ ---
async def start_duel_round(context, duel_id):
    duel = active_duels[duel_id]
    
    for player_id in [duel.player1_id, duel.player2_id]:
        try:
            player = players[player_id]
            opponent_id = duel.player2_id if player_id == duel.player1_id else duel.player1_id
            opponent = players[opponent_id]
            
            round_text = (
                f"‚öîÔ∏è **–†–∞—É–Ω–¥ {duel.round}**\n\n"
                f"‚ù§Ô∏è –¢–≤–æ–µ HP: {duel.player1_hp if player_id == duel.player1_id else duel.player2_hp}/10\n"
                f"‚ö° HP –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ ({opponent.username}): {duel.player2_hp if player_id == duel.player1_id else duel.player1_hp}/10\n\n"
                f"‚è± –í—ã–±–µ—Ä–∏ —Å—Ç–∏–∫–µ—Ä:"
            )
            
            await context.bot.send_message(
                chat_id=player_id,
                text=round_text,
                reply_markup=sticker_menu(player_id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞ ---
async def process_sticker_choice(query, sticker_id, player_id, context):
    duel = None
    duel_id = None
    
    for d_id, d in active_duels.items():
        if player_id in [d.player1_id, d.player2_id]:
            duel = d
            duel_id = d_id
            break
    
    if not duel:
        await query.edit_message_text("‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=main_menu())
        return
    
    if player_id == duel.player1_id:
        duel.player1_choice = sticker_id
    else:
        duel.player2_choice = sticker_id
    
    await query.edit_message_text(f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª: {STICKERS[sticker_id]['name']}\n‚è≥ –ñ–¥–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
    
    if duel.player1_choice and duel.player2_choice:
        await asyncio.sleep(1)
        await process_duel_round(context, duel_id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—É–Ω–¥–∞ –¥—É—ç–ª–∏ ---
async def process_duel_round(context, duel_id):
    duel = active_duels[duel_id]
    player1 = players[duel.player1_id]
    player2 = players[duel.player2_id]
    
    sticker1 = STICKERS[duel.player1_choice]
    sticker2 = STICKERS[duel.player2_choice]
    
    damage_to_p2 = 0
    damage_to_p1 = 0
    heal_p1 = 0
    heal_p2 = 0
    
    battle_log = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ 1
    if sticker1["type"] == "attack":
        damage = sticker1["power"]
        if sticker2["type"] == "defense":
            blocked = min(damage, sticker2["power"])
            damage_to_p2 = damage - blocked
            battle_log.append(f"üî• {player1.username} –∞—Ç–∞–∫—É–µ—Ç {sticker1['name']} ({damage} —É—Ä–æ–Ω–∞)")
            battle_log.append(f"‚ùÑÔ∏è {player2.username} –±–ª–æ–∫–∏—Ä—É–µ—Ç {blocked} —É—Ä–æ–Ω–∞ {sticker2['name']}")
            
            if sticker2.get("counter_damage"):
                damage_to_p1 = sticker2["counter_damage"]
                battle_log.append(f"‚ö° –û—Ç—Ä–∞–∂–µ–Ω–Ω—ã–π —É—Ä–æ–Ω: {damage_to_p1} –∫ {player1.username}")
        else:
            damage_to_p2 = damage
            battle_log.append(f"üî• {player1.username} –∞—Ç–∞–∫—É–µ—Ç {sticker1['name']} ({damage} —É—Ä–æ–Ω–∞)")
    
    elif sticker1["type"] == "heal":
        heal_p1 = min(sticker1["power"], 10 - duel.player1_hp)
        duel.player1_hp += heal_p1
        battle_log.append(f"üíö {player1.username} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {heal_p1} HP")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ 2
    if sticker2["type"] == "attack":
        damage = sticker2["power"]
        if sticker1["type"] == "defense":
            blocked = min(damage, sticker1["power"])
            damage_to_p1 = damage - blocked
            battle_log.append(f"üî• {player2.username} –∞—Ç–∞–∫—É–µ—Ç {sticker2['name']} ({damage} —É—Ä–æ–Ω–∞)")
            battle_log.append(f"‚ùÑÔ∏è {player1.username} –±–ª–æ–∫–∏—Ä—É–µ—Ç {blocked} —É—Ä–æ–Ω–∞ {sticker1['name']}")
            
            if sticker1.get("counter_damage"):
                damage_to_p2 = sticker1["counter_damage"]
                battle_log.append(f"‚ö° –û—Ç—Ä–∞–∂–µ–Ω–Ω—ã–π —É—Ä–æ–Ω: {damage_to_p2} –∫ {player2.username}")
        else:
            damage_to_p1 = damage
            battle_log.append(f"üî• {player2.username} –∞—Ç–∞–∫—É–µ—Ç {sticker2['name']} ({damage} —É—Ä–æ–Ω–∞)")
    
    elif sticker2["type"] == "heal":
        heal_p2 = min(sticker2["power"], 10 - duel.player2_hp)
        duel.player2_hp += heal_p2
        battle_log.append(f"üíö {player2.username} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {heal_p2} HP")
    
    duel.player1_hp = max(0, duel.player1_hp - damage_to_p1)
    duel.player2_hp = max(0, duel.player2_hp - damage_to_p2)
    
    result_text = "\n".join(battle_log) + f"\n\n‚ù§Ô∏è {player1.username}: {duel.player1_hp}/10 HP\n‚ù§Ô∏è {player2.username}: {duel.player2_hp}/10 HP"
    
    for player_id in [duel.player1_id, duel.player2_id]:
        try:
            await context.bot.send_message(chat_id=player_id, text=result_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫—É {player_id}: {e}")
    
    if duel.player1_hp <= 0 or duel.player2_hp <= 0:
        await end_duel(context, duel_id)
    else:
        duel.round += 1
        duel.player1_choice = None
        duel.player2_choice = None
        await asyncio.sleep(3)
        await start_duel_round(context, duel_id)

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É—ç–ª–∏ ---
async def end_duel(context, duel_id):
    duel = active_duels[duel_id]
    player1 = players[duel.player1_id]
    player2 = players[duel.player2_id]
    
    if duel.player1_hp <= 0:
        winner = player2
        loser = player1
    else:
        winner = player1
        loser = player2
    
    exp_gain = 25
    crystals_gain = 15
    
    winner.wins += 1
    winner.exp += exp_gain
    winner.crystals += crystals_gain
    
    loser.losses += 1
    loser.exp += exp_gain // 2
    
    if winner.exp >= 100:
        winner.level += 1
        winner.exp = 0
        level_up_msg = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –¥–æ—Å—Ç–∏–≥ {winner.level} —É—Ä–æ–≤–Ω—è!\n"
    else:
        level_up_msg = ""
    
    winner_text = (
        f"üèÜ **–ü–û–ë–ï–î–ê!** üéâ\n\n"
        f"–¢—ã –ø–æ–±–µ–¥–∏–ª {loser.username} –≤ –º–∞–≥–∏—á–µ—Å–∫–æ–π –¥—É—ç–ª–∏!\n\n"
        f"üéØ –ù–∞–≥—Ä–∞–¥—ã:\n"
        f"‚≠ê +{exp_gain} –æ–ø—ã—Ç–∞\n"
        f"üíé +{crystals_gain} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤\n"
        f"{level_up_msg}\n"
        f"–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    loser_text = (
        f"üíÄ **–ü–æ—Ä–∞–∂–µ–Ω–∏–µ**\n\n"
        f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –º–∞–≥–∏—á–µ—Å–∫—É—é –¥—É—ç–ª—å –ø—Ä–æ—Ç–∏–≤ {winner.username}\n\n"
        f"üéØ –ù–∞–≥—Ä–∞–¥—ã:\n"
        f"‚≠ê +{exp_gain//2} –æ–ø—ã—Ç–∞\n"
        f"üí™ –ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    for player_id, text in [(winner.user_id, winner_text), (loser.user_id, loser_text)]:
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=text,
                reply_markup=main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")
    
    del active_duels[duel_id]

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
    
    player = get_or_create_player(user_id, username)
    
    try:
        if query.data == 'main_menu':
            await query.edit_message_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
            
        elif query.data == 'find_duel':
            await query.edit_message_text("üîç –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
            await find_duel(query, user_id)
            
        elif query.data == 'invite_friend':
            await invite_friend(query, user_id)
            
        elif query.data == 'profile':
            await show_profile(query, player)
            
        elif query.data == 'test':
            await query.edit_message_text("‚úÖ –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
            
        elif query.data.startswith('sticker_'):
            sticker_id = query.data.replace('sticker_', '')
            await process_sticker_choice(query, sticker_id, user_id, context)
            
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=main_menu())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    if "Message is not modified" in str(error):
        return
    logger.error(f"–û—à–∏–±–∫–∞: {error}")

# --- HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Bot is running!')
    def log_message(self, *args): pass

def start_health_server():
    port = int(os.getenv('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    print(f"‚úÖ Health server started on port {port}")
    server.serve_forever()

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # HTTP —Å–µ—Ä–≤–µ—Ä
    server_thread = threading.Thread(target=start_health_server, daemon=True)
    server_thread.start()
    
    # –ë–æ—Ç
    if TOKEN:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("accept", accept_duel))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_error_handler(error_handler)
        
        print("üéÆ –ë–∏—Ç–≤–∞ –°—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    else:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")import random
import asyncio
import os
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN', '').strip()

if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å TELEGRAM_TOKEN –≤ Environment Variables")
    exit(1)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ ---
players = {}
active_duels = {}
pending_invites = {}
daily_quests = {}

class Player:
    def __init__(self, user_id, username):
        self.user_id = user_id
        self.username = username
        self.level = 1
        self.exp = 0
        self.crystals = 100
        self.wins = 0
        self.losses = 0
        self.rating = 1000
        self.sticker_sets = ["basic"]
        self.unlocked_stickers = {
            "basic": ["fireball", "icewall", "heal"],
            "lightning": [],
            "dark": [],
            "nature": []
        }

class Duel:
    def __init__(self, player1_id, player2_id, ranked=False):
        self.player1_id = player1_id
        self.player2_id = player2_id
        self.player1_hp = 10
        self.player2_hp = 10
        self.player1_choice = None
        self.player2_choice = None
        self.round = 1
        self.started_at = datetime.now()
        self.ranked = ranked

# --- –°—Ç–∏–∫–µ—Ä—ã-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è ---
STICKERS = {
    "fireball": {
        "name": "üî• –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä",
        "type": "attack",
        "power": 3,
        "description": "–ù–∞–Ω–æ—Å–∏—Ç 3 –µ–¥. —É—Ä–æ–Ω–∞",
        "set": "basic",
        "cost": 0
    },
    "icewall": {
        "name": "‚ùÑÔ∏è –õ–µ–¥—è–Ω–∞—è —Å—Ç–µ–Ω–∞", 
        "type": "defense",
        "power": 2,
        "counter_damage": 1,
        "description": "–ë–ª–æ–∫–∏—Ä—É–µ—Ç 2 —É—Ä–æ–Ω–∞, –Ω–∞–Ω–æ—Å–∏—Ç 1 –æ—Ç—Ä–∞–∂–µ–Ω–Ω—ã–π —É—Ä–æ–Ω",
        "set": "basic",
        "cost": 0
    },
    "heal": {
        "name": "üíö –¶–µ–ª–∏—Ç–µ–ª—å",
        "type": "heal",
        "power": 2,
        "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 2 HP",
        "set": "basic",
        "cost": 0
    }
}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    buttons = [
        [InlineKeyboardButton("‚öîÔ∏è –ù–∞–π—Ç–∏ –¥—É—ç–ª—å", callback_data='find_duel')],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data='invite_friend')],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("üîß –¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫", callback_data='test')]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞ ---
def sticker_menu(player_id):
    player = players[player_id]
    available_stickers = []
    
    for sticker_id, sticker in STICKERS.items():
        if sticker["set"] in player.sticker_sets:
            available_stickers.append(sticker_id)
    
    selected_stickers = random.sample(available_stickers, min(3, len(available_stickers)))
    
    buttons = []
    for sticker_id in selected_stickers:
        sticker = STICKERS[sticker_id]
        buttons.append([InlineKeyboardButton(sticker["name"], callback_data=f'sticker_{sticker_id}')])
    
    return InlineKeyboardMarkup(buttons)

def get_or_create_player(user_id, username):
    if user_id not in players:
        players[user_id] = Player(user_id, username)
    return players[user_id]

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
    
    player = get_or_create_player(user_id, username)
    
    welcome_text = (
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **–ë–∏—Ç–≤—É –°—Ç–∏–∫–µ—Ä–æ–≤**!\n\n"
        "‚öîÔ∏è –≠—Ç–æ –º–∞–≥–∏—á–µ—Å–∫–∞—è –¥—É—ç–ª—å, –≥–¥–µ —Å—Ç–∏–∫–µ—Ä—ã - —Ç–≤–æ–µ –æ—Ä—É–∂–∏–µ!\n\n"
        "**–ü—Ä–∞–≤–∏–ª–∞:**\n"
        "‚Ä¢ –í—ã–±–∏—Ä–∞–π —Å—Ç–∏–∫–µ—Ä—ã-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–±–µ–¥–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ PvP –¥—É—ç–ª–∏\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Å—è!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=main_menu())

# --- –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ---
async def show_profile(query, player):
    profile_text = (
        f"üßô **–ü—Ä–æ—Ñ–∏–ª—å –º–∞–≥–∞**\n\n"
        f"üë§ –ò–≥—Ä–æ–∫: {player.username}\n"
        f"üìà –£—Ä–æ–≤–µ–Ω—å: {player.level}\n"
        f"‚≠ê –û–ø—ã—Ç: {player.exp}/100\n"
        f"üèÖ –†–µ–π—Ç–∏–Ω–≥: {player.rating}‚≠ê\n"
        f"üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: {player.crystals}\n"
        f"üèÜ –ü–æ–±–µ–¥: {player.wins}\n"
        f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {player.losses}\n\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await query.edit_message_text(profile_text, reply_markup=main_menu())

# --- –ù–∞–π—Ç–∏ –¥—É—ç–ª—å ---
async def find_duel(query, player_id):
    player = players[player_id]
    
    # –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    for other_id, other_player in players.items():
        if other_id != player_id and other_id not in active_duels:
            duel_id = f"{player_id}_{other_id}"
            active_duels[duel_id] = Duel(player_id, other_id)
            
            await query.edit_message_text("‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å!")
            
            await context.bot.send_message(
                chat_id=other_id,
                text="‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å!",
                reply_markup=main_menu()
            )
            
            await start_duel_round(context, duel_id)
            return
    
    await query.edit_message_text(
        "‚è≥ –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞!",
        reply_markup=main_menu()
    )

# --- –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ ---
async def invite_friend(query, player_id):
    player = players[player_id]
    invite_id = f"{player_id}_{datetime.now().timestamp()}"
    
    pending_invites[invite_id] = {
        "from_player": player_id,
        "to_player": None,
        "created_at": datetime.now()
    }
    
    invite_text = (
        f"üéØ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å**\n\n"
        f"–ò–≥—Ä–æ–∫ {player.username} –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫—É—é –¥—É—ç–ª—å!\n"
        f"–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥—É: `{invite_id}`\n\n"
        f"–î—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
        f"`/accept {invite_id}`"
    )
    
    await query.edit_message_text(invite_text, reply_markup=main_menu())

# --- –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏ ---
async def accept_duel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `/accept –ö–û–î`")
        return
    
    invite_id = context.args[0]
    
    if invite_id not in pending_invites:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!")
        return
    
    invite = pending_invites[invite_id]
    from_player_id = invite["from_player"]
    
    if from_player_id == user_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
    duel_id = f"{from_player_id}_{user_id}"
    active_duels[duel_id] = Duel(from_player_id, user_id)
    
    del pending_invites[invite_id]
    
    from_player = players[from_player_id]
    
    await update.message.reply_text(f"‚úÖ –¢—ã –ø—Ä–∏–Ω—è–ª –≤—ã–∑–æ–≤ –æ—Ç {from_player.username}! –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å! ‚öîÔ∏è")
    
    await context.bot.send_message(
        chat_id=from_player_id,
        text=f"‚úÖ {username} –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π –≤—ã–∑–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å! ‚öîÔ∏è"
    )
    
    await start_duel_round(context, duel_id)

# --- –ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞ –¥—É—ç–ª–∏ ---
async def start_duel_round(context, duel_id):
    duel = active_duels[duel_id]
    
    for player_id in [duel.player1_id, duel.player2_id]:
        try:
            player = players[player_id]
            opponent_id = duel.player2_id if player_id == duel.player1_id else duel.player1_id
            opponent = players[opponent_id]
            
            round_text = (
                f"‚öîÔ∏è **–†–∞—É–Ω–¥ {duel.round}**\n\n"
                f"‚ù§Ô∏è –¢–≤–æ–µ HP: {duel.player1_hp if player_id == duel.player1_id else duel.player2_hp}/10\n"
                f"‚ö° HP –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ ({opponent.username}): {duel.player2_hp if player_id == duel.player1_id else duel.player1_hp}/10\n\n"
                f"‚è± –í—ã–±–µ—Ä–∏ —Å—Ç–∏–∫–µ—Ä:"
            )
            
            await context.bot.send_message(
                chat_id=player_id,
                text=round_text,
                reply_markup=sticker_menu(player_id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞ ---
async def process_sticker_choice(query, sticker_id, player_id, context):
    duel = None
    duel_id = None
    
    for d_id, d in active_duels.items():
        if player_id in [d.player1_id, d.player2_id]:
            duel = d
            duel_id = d_id
            break
    
    if not duel:
        await query.edit_message_text("‚ùå –î—É—ç–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=main_menu())
        return
    
    if player_id == duel.player1_id:
        duel.player1_choice = sticker_id
    else:
        duel.player2_choice = sticker_id
    
    await query.edit_message_text(f"‚úÖ –¢—ã –≤—ã–±—Ä–∞–ª: {STICKERS[sticker_id]['name']}\n‚è≥ –ñ–¥–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
    
    if duel.player1_choice and duel.player2_choice:
        await asyncio.sleep(1)
        await process_duel_round(context, duel_id)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—É–Ω–¥–∞ –¥—É—ç–ª–∏ ---
async def process_duel_round(context, duel_id):
    duel = active_duels[duel_id]
    player1 = players[duel.player1_id]
    player2 = players[duel.player2_id]
    
    sticker1 = STICKERS[duel.player1_choice]
    sticker2 = STICKERS[duel.player2_choice]
    
    damage_to_p2 = 0
    damage_to_p1 = 0
    heal_p1 = 0
    heal_p2 = 0
    
    battle_log = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ 1
    if sticker1["type"] == "attack":
        damage = sticker1["power"]
        if sticker2["type"] == "defense":
            blocked = min(damage, sticker2["power"])
            damage_to_p2 = damage - blocked
            battle_log.append(f"üî• {player1.username} –∞—Ç–∞–∫—É–µ—Ç {sticker1['name']} ({damage} —É—Ä–æ–Ω–∞)")
            battle_log.append(f"‚ùÑÔ∏è {player2.username} –±–ª–æ–∫–∏—Ä—É–µ—Ç {blocked} —É—Ä–æ–Ω–∞ {sticker2['name']}")
            
            if sticker2.get("counter_damage"):
                damage_to_p1 = sticker2["counter_damage"]
                battle_log.append(f"‚ö° –û—Ç—Ä–∞–∂–µ–Ω–Ω—ã–π —É—Ä–æ–Ω: {damage_to_p1} –∫ {player1.username}")
        else:
            damage_to_p2 = damage
            battle_log.append(f"üî• {player1.username} –∞—Ç–∞–∫—É–µ—Ç {sticker1['name']} ({damage} —É—Ä–æ–Ω–∞)")
    
    elif sticker1["type"] == "heal":
        heal_p1 = min(sticker1["power"], 10 - duel.player1_hp)
        duel.player1_hp += heal_p1
        battle_log.append(f"üíö {player1.username} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {heal_p1} HP")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ 2
    if sticker2["type"] == "attack":
        damage = sticker2["power"]
        if sticker1["type"] == "defense":
            blocked = min(damage, sticker1["power"])
            damage_to_p1 = damage - blocked
            battle_log.append(f"üî• {player2.username} –∞—Ç–∞–∫—É–µ—Ç {sticker2['name']} ({damage} —É—Ä–æ–Ω–∞)")
            battle_log.append(f"‚ùÑÔ∏è {player1.username} –±–ª–æ–∫–∏—Ä—É–µ—Ç {blocked} —É—Ä–æ–Ω–∞ {sticker1['name']}")
            
            if sticker1.get("counter_damage"):
                damage_to_p2 = sticker1["counter_damage"]
                battle_log.append(f"‚ö° –û—Ç—Ä–∞–∂–µ–Ω–Ω—ã–π —É—Ä–æ–Ω: {damage_to_p2} –∫ {player2.username}")
        else:
            damage_to_p1 = damage
            battle_log.append(f"üî• {player2.username} –∞—Ç–∞–∫—É–µ—Ç {sticker2['name']} ({damage} —É—Ä–æ–Ω–∞)")
    
    elif sticker2["type"] == "heal":
        heal_p2 = min(sticker2["power"], 10 - duel.player2_hp)
        duel.player2_hp += heal_p2
        battle_log.append(f"üíö {player2.username} –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {heal_p2} HP")
    
    duel.player1_hp = max(0, duel.player1_hp - damage_to_p1)
    duel.player2_hp = max(0, duel.player2_hp - damage_to_p2)
    
    result_text = "\n".join(battle_log) + f"\n\n‚ù§Ô∏è {player1.username}: {duel.player1_hp}/10 HP\n‚ù§Ô∏è {player2.username}: {duel.player2_hp}/10 HP"
    
    for player_id in [duel.player1_id, duel.player2_id]:
        try:
            await context.bot.send_message(chat_id=player_id, text=result_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫—É {player_id}: {e}")
    
    if duel.player1_hp <= 0 or duel.player2_hp <= 0:
        await end_duel(context, duel_id)
    else:
        duel.round += 1
        duel.player1_choice = None
        duel.player2_choice = None
        await asyncio.sleep(3)
        await start_duel_round(context, duel_id)

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É—ç–ª–∏ ---
async def end_duel(context, duel_id):
    duel = active_duels[duel_id]
    player1 = players[duel.player1_id]
    player2 = players[duel.player2_id]
    
    if duel.player1_hp <= 0:
        winner = player2
        loser = player1
    else:
        winner = player1
        loser = player2
    
    exp_gain = 25
    crystals_gain = 15
    
    winner.wins += 1
    winner.exp += exp_gain
    winner.crystals += crystals_gain
    
    loser.losses += 1
    loser.exp += exp_gain // 2
    
    if winner.exp >= 100:
        winner.level += 1
        winner.exp = 0
        level_up_msg = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –¥–æ—Å—Ç–∏–≥ {winner.level} —É—Ä–æ–≤–Ω—è!\n"
    else:
        level_up_msg = ""
    
    winner_text = (
        f"üèÜ **–ü–û–ë–ï–î–ê!** üéâ\n\n"
        f"–¢—ã –ø–æ–±–µ–¥–∏–ª {loser.username} –≤ –º–∞–≥–∏—á–µ—Å–∫–æ–π –¥—É—ç–ª–∏!\n\n"
        f"üéØ –ù–∞–≥—Ä–∞–¥—ã:\n"
        f"‚≠ê +{exp_gain} –æ–ø—ã—Ç–∞\n"
        f"üíé +{crystals_gain} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤\n"
        f"{level_up_msg}\n"
        f"–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    loser_text = (
        f"üíÄ **–ü–æ—Ä–∞–∂–µ–Ω–∏–µ**\n\n"
        f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –º–∞–≥–∏—á–µ—Å–∫—É—é –¥—É—ç–ª—å –ø—Ä–æ—Ç–∏–≤ {winner.username}\n\n"
        f"üéØ –ù–∞–≥—Ä–∞–¥—ã:\n"
        f"‚≠ê +{exp_gain//2} –æ–ø—ã—Ç–∞\n"
        f"üí™ –ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!\n\n"
        f"–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    for player_id, text in [(winner.user_id, winner_text), (loser.user_id, loser_text)]:
        try:
            await context.bot.send_message(
                chat_id=player_id,
                text=text,
                reply_markup=main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")
    
    del active_duels[duel_id]

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = update.effective_user.username or "–ò–≥—Ä–æ–∫"
    
    player = get_or_create_player(user_id, username)
    
    try:
        if query.data == 'main_menu':
            await query.edit_message_text("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
            
        elif query.data == 'find_duel':
            await query.edit_message_text("üîç –ò—â–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞...")
            await find_duel(query, user_id)
            
        elif query.data == 'invite_friend':
            await invite_friend(query, user_id)
            
        elif query.data == 'profile':
            await show_profile(query, player)
            
        elif query.data == 'test':
            await query.edit_message_text("‚úÖ –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
            
        elif query.data.startswith('sticker_'):
            sticker_id = query.data.replace('sticker_', '')
            await process_sticker_choice(query, sticker_id, user_id, context)
            
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=main_menu())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    if "Message is not modified" in str(error):
        return
    logger.error(f"–û—à–∏–±–∫–∞: {error}")

# --- HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Bot is running!')
    def log_message(self, *args): pass

def start_health_server():
    port = int(os.getenv('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    print(f"‚úÖ Health server started on port {port}")
    server.serve_forever()

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # HTTP —Å–µ—Ä–≤–µ—Ä
    server_thread = threading.Thread(target=start_health_server, daemon=True)
    server_thread.start()
    
    # –ë–æ—Ç
    if TOKEN:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("accept", accept_duel))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_error_handler(error_handler)
        
        print("üéÆ –ë–∏—Ç–≤–∞ –°—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    else:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
