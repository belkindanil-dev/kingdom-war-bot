import os
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN', '').strip()

if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å TELEGRAM_TOKEN –≤ Environment Variables")
    exit(1)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---
PARTS_DATABASE = {
    "2108": {  # –í–ê–ó 2108/2109/21099
        "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏": "2108-3501070",
        "–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2108-1109010",
        "–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2108-1012005",
        "—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è": "2108-3701000",
        "—Ä–µ–º–µ–Ω—å –ì–†–ú": "2108-1006040",
        "–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π": "2108-2905452",
        "–ª–∞–º–ø–∞ –±–ª–∏–∂–Ω–µ–≥–æ —Å–≤–µ—Ç–∞": "2108-3747010",
        "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä": "2108-3701010",
        "—Å—Ç–∞—Ä—Ç–µ—Ä": "2108-3708010"
    },
    "2110": {  # –í–ê–ó 2110/2111/2112
        "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏": "2110-3501070",
        "–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2110-1109010",
        "–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2110-1012005",
        "—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è": "2110-3701000",
        "—Ä–µ–º–µ–Ω—å –ì–†–ú": "2110-1006040",
        "–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π": "2110-2905452",
        "–ª–∞–º–ø–∞ –±–ª–∏–∂–Ω–µ–≥–æ —Å–≤–µ—Ç–∞": "2110-3747010",
        "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä": "2110-3701010",
        "—Å—Ç–∞—Ä—Ç–µ—Ä": "2110-3708010"
    },
    "2114": {  # –í–ê–ó 2114/2115
        "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏": "2114-3501070",
        "–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2114-1109010",
        "–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2114-1012005",
        "—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è": "2114-3701000",
        "—Ä–µ–º–µ–Ω—å –ì–†–ú": "2114-1006040",
        "–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π": "2114-2905452",
        "–ª–∞–º–ø–∞ –±–ª–∏–∂–Ω–µ–≥–æ —Å–≤–µ—Ç–∞": "2114-3747010"
    },
    "2121": {  # –í–ê–ó 2121 –ù–∏–≤–∞
        "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏": "2121-3501070",
        "–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2121-1109010",
        "–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2121-1012005",
        "—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è": "2121-3701000",
        "—Ä–µ–º–µ–Ω—å –ì–†–ú": "2121-1006040",
        "–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–Ω–∏–π": "2121-2905452"
    },
    "2190": {  # LADA Granta
        "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏": "2190-3501070",
        "–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2190-1109010",
        "–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2190-1012005",
        "—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è": "2190-3701000",
        "—Ä–µ–º–µ–Ω—å –ì–†–ú": "2190-1006040",
        "–ª–∞–º–ø–∞ –±–ª–∏–∂–Ω–µ–≥–æ —Å–≤–µ—Ç–∞": "2190-3747010"
    },
    "2170": {  # LADA Priora
        "—Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏": "2170-3501070",
        "–≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2170-1109010",
        "–º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä": "2170-1012005",
        "—Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è": "2170-3701000",
        "—Ä–µ–º–µ–Ω—å –ì–†–ú": "2170-1006040",
        "–ª–∞–º–ø–∞ –±–ª–∏–∂–Ω–µ–≥–æ —Å–≤–µ—Ç–∞": "2170-3747010"
    }
}

# --- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ ---
POPULAR_MODELS = {
    "2108": "–í–ê–ó 2108/2109/21099 (–°–∞–º–∞—Ä–∞)",
    "2110": "–í–ê–ó 2110/2111/2112",
    "2114": "–í–ê–ó 2114/2115",
    "2121": "–í–ê–ó 2121 (–ù–∏–≤–∞)",
    "2190": "LADA Granta",
    "2170": "LADA Priora"
}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    buttons = [
        [InlineKeyboardButton("üöó –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data='select_model')],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ VIN", callback_data='search_vin')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π", callback_data='parts_list')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ---
def models_menu():
    buttons = []
    for model_code, model_name in POPULAR_MODELS.items():
        buttons.append([InlineKeyboardButton(model_name, callback_data=f'model_{model_code}')])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])
    return InlineKeyboardMarkup(buttons)

# --- –ú–µ–Ω—é –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ ---
def parts_menu(model_code):
    buttons = []
    parts = PARTS_DATABASE.get(model_code, {})
    
    for part_name, part_number in parts.items():
        buttons.append([InlineKeyboardButton(
            f"üîß {part_name.title()}", 
            callback_data=f'part_{model_code}_{part_name}'
        )])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥–µ–ª—è–º", callback_data='select_model')])
    buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
    
    return InlineKeyboardMarkup(buttons)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üîß **–ê–≤—Ç–æ–í–ê–ó –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–ø—á–∞—Å—Ç—è–º**\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è —Ç–≤–æ–µ–≥–æ –ê–≤—Ç–æ–í–ê–ó–∞!\n\n"
        "**–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ üöó –ü–æ–¥–±–∏—Ä–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ\n"
        "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –ø–æ VIN-–Ω–æ–º–µ—Ä—É\n"
        "‚Ä¢ üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã\n"
        "‚Ä¢ üí∞ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ---
async def handle_model_selection(query, model_code):
    model_name = POPULAR_MODELS.get(model_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
    
    response_text = (
        f"üöó **–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å:** {model_name}\n\n"
        f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏:**\n"
    )
    
    parts = PARTS_DATABASE.get(model_code, {})
    if parts:
        for part_name, part_number in parts.items():
            response_text += f"‚Ä¢ {part_name.title()}: `{part_number}`\n"
    else:
        response_text += "‚ùå –ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
    
    response_text += "\nüîß –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å:"
    
    await query.edit_message_text(response_text, reply_markup=parts_menu(model_code))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø—á–∞—Å—Ç–∏ ---
async def handle_part_selection(query, model_code, part_name):
    model_name = POPULAR_MODELS.get(model_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
    part_number = PARTS_DATABASE.get(model_code, {}).get(part_name, "–ù–µ –Ω–∞–π–¥–µ–Ω")
    
    response_text = (
        f"üîß **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—á–∞—Å—Ç–∏**\n\n"
        f"üöó –ú–æ–¥–µ–ª—å: {model_name}\n"
        f"üìù –ó–∞–ø—á–∞—Å—Ç—å: {part_name.title()}\n"
        f"üî¢ **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª:** `{part_number}`\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∞–º
    analogs = get_analogs(part_number)
    if analogs:
        response_text += "üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–Ω–∞–ª–æ–≥–∏:**\n"
        for analog in analogs:
            response_text += f"‚Ä¢ {analog}\n"
    
    response_text += "\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£—Ç–æ—á–Ω—è–π –∞—Ä—Ç–∏–∫—É–ª —É –ø—Ä–æ–¥–∞–≤—Ü–∞!"
    
    buttons = [
        [InlineKeyboardButton("üìã –î—Ä—É–≥–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏", callback_data=f'model_{model_code}')],
        [InlineKeyboardButton("üöó –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å", callback_data='select_model')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    
    await query.edit_message_text(response_text, reply_markup=InlineKeyboardMarkup(buttons))

# --- –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---
def get_analogs(original_number):
    analogs_db = {
        "2108-3501070": ["BOSCH 0986494754", "TRW GDB1764", "FERODO FDB526"],
        "2108-1109010": ["MANN C25619", "KNECHT LX1024", "SACHS 320021"],
        "2108-1012005": ["MANN W940/25", "KNECHT OC256", "BOSCH 0451103319"],
        "2110-3501070": ["BOSCH 0986494755", "TRW GDB1765", "FERODO FDB527"],
        "2110-1109010": ["MANN C25620", "KNECHT LX1025", "SACHS 320022"],
        "2190-3501070": ["BOSCH 0986494756", "TRW GDB1766", "FERODO FDB528"]
    }
    return analogs_db.get(original_number, [])

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ VIN-–Ω–æ–º–µ—Ä–∞ ---
async def handle_vin_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vin = update.message.text.upper().strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è VIN (17 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(vin) != 17:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VIN! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=main_menu()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ VIN (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    model_code = detect_model_from_vin(vin)
    
    if model_code:
        model_name = POPULAR_MODELS.get(model_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        await update.message.reply_text(
            f"‚úÖ VIN —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!\n"
            f"üöó –ú–æ–¥–µ–ª—å: {model_name}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å:",
            reply_markup=parts_menu(model_code)
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥–µ–ª—å –ø–æ VIN.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é:",
            reply_markup=models_menu()
        )

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ VIN (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ) ---
def detect_model_from_vin(vin):
    vin_prefixes = {
        "XTA2108": "2108",
        "XTA2109": "2108", 
        "XTA2110": "2110",
        "XTA2111": "2110",
        "XTA2112": "2110",
        "XTA2114": "2114",
        "XTA2121": "2121",
        "XTA2190": "2190",
        "XTA2170": "2170"
    }
    
    for prefix, model in vin_prefixes.items():
        if vin.startswith(prefix):
            return model
    return None

# --- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π ---
async def show_parts_list(query):
    response_text = "üìã **–ë–∞–∑–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –ê–≤—Ç–æ–í–ê–ó**\n\n"
    
    for model_code, parts in PARTS_DATABASE.items():
        model_name = POPULAR_MODELS.get(model_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        response_text += f"üöó **{model_name}**\n"
        
        for part_name, part_number in parts.items():
            response_text += f"‚Ä¢ {part_name.title()}: `{part_number}`\n"
        response_text += "\n"
    
    await query.edit_message_text(response_text, reply_markup=main_menu())

# --- –ü–æ–º–æ—â—å ---
async def show_help(query):
    help_text = (
        "‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
        "**–ö–∞–∫ –Ω–∞–π—Ç–∏ –∑–∞–ø—á–∞—Å—Ç—å:**\n"
        "1. üöó –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ\n"
        "2. üîß –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å\n"
        "3. üìù –ü–æ–ª—É—á–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª\n\n"
        "**VIN-–Ω–æ–º–µ—Ä:**\n"
        "‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å XTA...\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä: XTA21080012345678\n\n"
        "**–í–∞–∂–Ω–æ:**\n"
        "‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª—ã –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è\n"
        "‚Ä¢ –£—Ç–æ—á–Ω—è–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π –∞—Ä—Ç–∏–∫—É–ª—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ /start"
    )
    
    await query.edit_message_text(help_text, reply_markup=main_menu())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'main_menu':
        await query.edit_message_text("üîß –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        
    elif query.data == 'select_model':
        await query.edit_message_text("üöó –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:", reply_markup=models_menu())
        
    elif query.data == 'search_vin':
        await query.edit_message_text(
            "üîç **–ü–æ–∏—Å–∫ –ø–æ VIN-–Ω–æ–º–µ—Ä—É**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ VIN-–Ω–æ–º–µ—Ä —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ (17 —Å–∏–º–≤–æ–ª–æ–≤):\n"
            "–ü—Ä–∏–º–µ—Ä: `XTA21080012345678`\n\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é:",
            reply_markup=models_menu()
        )
        
    elif query.data == 'parts_list':
        await show_parts_list(query)
        
    elif query.data == 'help':
        await show_help(query)
        
    elif query.data.startswith('model_'):
        model_code = query.data.replace('model_', '')
        await handle_model_selection(query, model_code)
        
    elif query.data.startswith('part_'):
        parts = query.data.replace('part_', '').split('_')
        if len(parts) >= 2:
            model_code = parts[0]
            part_name = '_'.join(parts[1:])
            await handle_part_selection(query, model_code, part_name)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ VIN
    if len(text) == 17 and text.upper().startswith('XTA'):
        await handle_vin_search(update, context)
    else:
        await update.message.reply_text(
            "üîß –û—Ç–ø—Ä–∞–≤—å VIN-–Ω–æ–º–µ—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu()
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    if "Message is not modified" in str(error):
        return
    logger.error(f"–û—à–∏–±–∫–∞: {error}")

# --- HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'AutoVAZ Parts Bot is running!')
    def log_message(self, *args): pass

def start_health_server():
    port = int(os.getenv('PORT', 10000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    print(f"‚úÖ Health server started on port {port}")
    server.serve_forever()

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # HTTP —Å–µ—Ä–≤–µ—Ä
    server_thread = threading.Thread(target=start_health_server, daemon=True)
    server_thread.start()
    
    # –ë–æ—Ç
    if TOKEN:
        application = Application.builder().token(TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)
        
        print("üîß –ê–≤—Ç–æ–í–ê–ó –ü–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
    else:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
