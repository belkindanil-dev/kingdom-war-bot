import random
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤ ---
kingdoms = {}  # {user_id: Kingdom}

class Kingdom:
    def __init__(self):
        self.resources = {'gold': 500, 'food': 300}
        self.hp = 100
        self.max_hp = 100
        self.level = 1
        self.attack_power = 1
        self.defense = 1
        self.farms = 1
        self.cities = 1

def get_or_create_kingdom(user_id):
    if user_id not in kingdoms:
        kingdoms[user_id] = Kingdom()
    return kingdoms[user_id]

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    buttons = [
        [InlineKeyboardButton("‚öîÔ∏è –í–æ–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data='war_menu')],
        [InlineKeyboardButton("üè∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data='economy_menu')],
        [InlineKeyboardButton("üåæ –†–µ—Å—É—Ä—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data='resource_menu')],
        [InlineKeyboardButton("üéØ –ú–∏—Å—Å–∏–∏", callback_data='missions_menu')]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –í–æ–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ---
def war_menu():
    buttons = [
        [InlineKeyboardButton("–°—Ä–∞–∑–∏—Ç—å—Å—è —Å NPC", callback_data='attack_menu')],
        [InlineKeyboardButton("–°—Ä–∞–∑–∏—Ç—å—Å—è —Å –∏–≥—Ä–æ–∫–æ–º", callback_data='start_pvp')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ---
def economy_menu():
    buttons = [
        [InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å –≥–æ—Ä–æ–¥ (+1 —É—Ä–æ–≤–µ–Ω—å) ‚Äî 200 –∑–æ–ª–æ—Ç–∞", callback_data='upgrade_city')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –†–µ—Å—É—Ä—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ---
def resource_menu():
    buttons = [
        [InlineKeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É (+1) ‚Äî 150 –∑–æ–ª–æ—Ç–∞", callback_data='build_farm')],
        [InlineKeyboardButton("–°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã", callback_data='collect_resources')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(buttons)

# --- –ú–µ–Ω—é –º–∏—Å—Å–∏–π ---
def missions_menu():
    buttons = [
        [InlineKeyboardButton("‚öîÔ∏è –í–æ–µ–Ω–Ω–∞—è –º–∏—Å—Å–∏—è", callback_data='mission_war')],
        [InlineKeyboardButton("üè∞ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –º–∏—Å—Å–∏—è", callback_data='mission_economy')],
        [InlineKeyboardButton("üåæ –†–µ—Å—É—Ä—Å–Ω–∞—è –º–∏—Å—Å–∏—è", callback_data='mission_resource')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(buttons)

# --- HP –ø–∞–Ω–µ–ª—å –¥–ª—è PvP ---
def hp_bar(hp):
    total = 20
    filled = int(max(hp,0) / 100 * total)
    empty = total - filled
    return "üü©" * filled + "‚¨õ" * empty

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    get_or_create_kingdom(user_id)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", reply_markup=main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–≥—Ä–µ–π–¥–æ–≤ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ ---
async def handle_upgrade(query, kingdom, upgrade_type):
    if upgrade_type == 'upgrade_hp':
        cost = 200
        if kingdom.resources['gold'] < cost:
            await query.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            return
        kingdom.resources['gold'] -= cost
        kingdom.max_hp += 20
        kingdom.hp = kingdom.max_hp
        await query.message.reply_text(f"‚úÖ HP —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {kingdom.max_hp}!")

    elif upgrade_type == 'upgrade_attack':
        cost = 150
        if kingdom.resources['gold'] < cost:
            await query.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            return
        kingdom.resources['gold'] -= cost
        kingdom.attack_power += 1
        await query.message.reply_text(f"‚úÖ –ê—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {kingdom.attack_power}!")

    elif upgrade_type == 'upgrade_defense':
        cost = 150
        if kingdom.resources['gold'] < cost:
            await query.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            return
        kingdom.resources['gold'] -= cost
        kingdom.defense += 1
        await query.message.reply_text(f"‚úÖ –ó–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {kingdom.defense}!")

    elif upgrade_type == 'upgrade_city':
        cost = 200
        if kingdom.resources['gold'] < cost:
            await query.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            return
        kingdom.resources['gold'] -= cost
        kingdom.cities += 1
        await query.message.reply_text(f"üè∞ –£—Ä–æ–≤–µ–Ω—å –≥–æ—Ä–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {kingdom.cities}!")

    elif upgrade_type == 'build_farm':
        cost = 150
        if kingdom.resources['gold'] < cost:
            await query.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
            return
        kingdom.resources['gold'] -= cost
        kingdom.farms += 1
        await query.message.reply_text(f"üåæ –§–µ—Ä–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞! –í—Å–µ–≥–æ —Ñ–µ—Ä–º: {kingdom.farms}")

# --- –°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ ---
async def collect_resources(query, kingdom):
    gold_gain = 50 * kingdom.cities
    food_gain = 30 * kingdom.farms
    kingdom.resources['gold'] += gold_gain
    kingdom.resources['food'] += food_gain
    await query.message.reply_text(f"üåæ –°–æ–±—Ä–∞–Ω—ã —Ä–µ—Å—É—Ä—Å—ã:\nüí∞ {gold_gain} –∑–æ–ª–æ—Ç–∞\nüåæ {food_gain} –µ–¥—ã")

# --- PvP –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –±–æ–π ---
async def start_pvp_invite(attacker_id, defender_id, context):
    attacker = get_or_create_kingdom(attacker_id)
    defender = get_or_create_kingdom(defender_id)

    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚öîÔ∏è –ü—Ä–∏–Ω—è—Ç—å –±–æ–π", callback_data=f"accept_{attacker_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –±–æ–π", callback_data=f"decline_{attacker_id}")]
    ])
    
    try:
        await context.bot.send_message(
            chat_id=defender_id,
            text=f"‚öîÔ∏è –ò–≥—Ä–æ–∫ {attacker_id} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –±–∏—Ç–≤—É!\n–ü—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –±–æ–π?",
            reply_markup=buttons
        )
        await context.bot.send_message(
            chat_id=attacker_id,
            text=f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞ {defender_id}..."
        )
    except:
        await context.bot.send_message(chat_id=attacker_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è PvP ---
async def handle_pvp_response(query, context):
    user_id = query.from_user.id
    data = query.data
    if data.startswith("accept_") or data.startswith("decline_"):
        attacker_id = int(data.split("_")[1])
        attacker = get_or_create_kingdom(attacker_id)
        defender = get_or_create_kingdom(user_id)

        if data.startswith("decline_"):
            await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –±–∏—Ç–≤—É.")
            try:
                await context.bot.send_message(chat_id=attacker_id,
                                               text=f"‚ùå –ò–≥—Ä–æ–∫ {user_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –≤—ã–∑–æ–≤.")
            except: pass
            return

        # –ï—Å–ª–∏ –ø—Ä–∏–Ω—è–ª –±–æ–π
        await query.edit_message_text("‚öîÔ∏è –í—ã –ø—Ä–∏–Ω—è–ª–∏ –±–æ–π!")
        try:
            await context.bot.send_message(chat_id=attacker_id,
                                           text=f"‚úÖ –ò–≥—Ä–æ–∫ {user_id} –ø—Ä–∏–Ω—è–ª –±–æ–π! –ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
        except: pass

        # –°—Ç–∞—Ä—Ç –±–∏—Ç–≤—ã
        await run_pvp_battle(attacker, defender, attacker_id, user_id, context)

# --- PvP –±–∏—Ç–≤–∞ —Å GIF –∏ HP ---
async def run_pvp_battle(attacker, defender, attacker_id, defender_id, context):
    attacker.hp = attacker.max_hp
    defender.hp = defender.max_hp
    battle_round = 1

    battle_msg = await context.bot.send_message(
        chat_id=attacker_id,
        text=f"–†–∞—É–Ω–¥ {battle_round}\n–í—ã: {hp_bar(attacker.hp)} {attacker.hp} HP\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {hp_bar(defender.hp)} {defender.hp} HP\n–ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!"
    )
    # –¢–∞–∫ –∂–µ –¥–ª—è –∑–∞—â–∏—â–∞–µ–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    try:
        await context.bot.send_message(
            chat_id=defender_id,
            text=f"–†–∞—É–Ω–¥ {battle_round}\n–í—ã: {hp_bar(defender.hp)} {defender.hp} HP\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {hp_bar(attacker.hp)} {attacker.hp} HP\n–ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!"
        )
    except: pass

    battle_gif = "https://media.giphy.com/media/QBd2kLB5qDmysEXre9/giphy.gif"
    gif_msg = await context.bot.send_animation(chat_id=attacker_id, animation=battle_gif)
    await asyncio.sleep(3)
    try:
        await context.bot.delete_message(chat_id=attacker_id, message_id=gif_msg.message_id)
    except: pass

    while attacker.hp > 0 and defender.hp > 0:
        await asyncio.sleep(2)
        attack_damage = random.randint(10, 25) * attacker.attack_power
        defend_damage = random.randint(8, 20) * defender.attack_power // max(defender.defense,1)
        defender.hp -= attack_damage
        attacker.hp -= defend_damage
        battle_round += 1

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        try:
            await context.bot.send_message(
                chat_id=attacker_id,
                text=f"–†–∞—É–Ω–¥ {battle_round}\n–í—ã –Ω–∞–Ω–µ—Å–ª–∏: {attack_damage} —É—Ä–æ–Ω–∞, –ø–æ–ª—É—á–∏–ª–∏: {defend_damage}\n"
                     f"–í—ã: {hp_bar(attacker.hp)} {max(attacker.hp,0)} HP\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {hp_bar(defender.hp)} {max(defender.hp,0)} HP"
            )
        except: pass
        try:
            await context.bot.send_message(
                chat_id=defender_id,
                text=f"–†–∞—É–Ω–¥ {battle_round}\n–í—ã –Ω–∞–Ω–µ—Å–ª–∏: {defend_damage} —É—Ä–æ–Ω–∞, –ø–æ–ª—É—á–∏–ª–∏: {attack_damage}\n"
                     f"–í—ã: {hp_bar(defender.hp)} {max(defender.hp,0)} HP\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {hp_bar(attacker.hp)} {max(attacker.hp,0)} HP"
            )
        except: pass

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if attacker.hp > 0:
        gold_stolen = defender.resources['gold']//2
        food_stolen = defender.resources['food']//2
        attacker.resources['gold'] += gold_stolen
        attacker.resources['food'] += food_stolen
        defender.resources['gold'] -= gold_stolen
        defender.resources['food'] -= food_stolen
        await context.bot.send_message(chat_id=attacker_id, text=f"üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\nüí∞ +{gold_stolen} –∑–æ–ª–æ—Ç–∞\nüåæ +{food_stolen} –µ–¥—ã")
        try:
            await context.bot.send_message(chat_id=defender_id, text=f"üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\nüí∞ –ü–æ—Ç–µ—Ä—è–Ω–æ: {gold_stolen} –∑–æ–ª–æ—Ç–∞\nüåæ –ü–æ—Ç–µ—Ä—è–Ω–æ: {food_stolen} –µ–¥—ã")
        except: pass
    else:
        gold_stolen = attacker.resources['gold']//2
        food_stolen = attacker.resources['food']//2
        defender.resources['gold'] += gold_stolen
        defender.resources['food'] += food_stolen
        attacker.resources['gold'] -= gold_stolen
        attacker.resources['food'] -= food_stolen
        await context.bot.send_message(chat_id=attacker_id, text=f"üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\nüí∞ –ü–æ—Ç–µ—Ä—è–Ω–æ: {gold_stolen} –∑–æ–ª–æ—Ç–∞\nüåæ –ü–æ—Ç–µ—Ä—è–Ω–æ: {food_stolen} –µ–¥—ã")
        try:
            await context.bot.send_message(chat_id=defender_id, text=f"üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\nüí∞ +{gold_stolen} –∑–æ–ª–æ—Ç–∞\nüåæ +{food_stolen} –µ–¥—ã")
        except: pass

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    kingdom = get_or_create_kingdom(user_id)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == "main_menu":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", reply_markup=main_menu())
    # –í–æ–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    elif query.data == "war_menu":
        await query.edit_message_text("–í–æ–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:", reply_markup=war_menu())
    elif query.data == "start_pvp":
        markup = pvp_menu(user_id)
        if markup:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∞—Ç–∞–∫–∏:", reply_markup=markup)
        else:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤!", reply_markup=main_menu())
    elif query.data.startswith("pvp_"):
        defender_id = int(query.data.split("_")[1])
        await start_pvp_invite(user_id, defender_id, context)
    elif query.data.startswith("accept_") or query.data.startswith("decline_"):
        await handle_pvp_response(query, context)
    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    elif query.data == "economy_menu":
        await query.edit_message_text("–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:", reply_markup=economy_menu())
    elif query.data == "upgrade_city":
        await handle_upgrade(query, kingdom, 'upgrade_city')
    # –†–µ—Å—É—Ä—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    elif query.data == "resource_menu":
        await query.edit_message_text("–†–µ—Å—É—Ä—Å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:", reply_markup=resource_menu())
    elif query.data == "build_farm":
        await handle_upgrade(query, kingdom, 'build_farm')
    elif query.data == "collect_resources":
        await collect_resources(query, kingdom)
    # –ú–∏—Å—Å–∏–∏
    elif query.data == "missions_menu":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏—Å—Å–∏—é:", reply_markup=missions_menu())
    elif query.data == "mission_war":
        await query.message.reply_text("–ú–∏—Å—Å–∏—è –≤–æ–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞!")
    elif query.data == "mission_economy":
        await query.message.reply_text("–ú–∏—Å—Å–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞!")
    elif query.data == "mission_resource":
        await query.message.reply_text("–ú–∏—Å—Å–∏—è —Ä–µ—Å—É—Ä—Å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞!")

# --- PvP –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ ---
def pvp_menu(current_user_id):
    opponents = [uid for uid in kingdoms.keys() if uid != current_user_id]
    if not opponents: return None
    buttons = [[InlineKeyboardButton(f"–ò–≥—Ä–æ–∫ {uid}", callback_data=f"pvp_{uid}")] for uid in opponents]
    return InlineKeyboardMarkup(buttons)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token("8056012397:AAG7cQuWw38ozN8hCJv8NMH0fyjpbv_zb4E").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
