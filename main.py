import random
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤
kingdoms = {}  # {user_id: Kingdom}

class Kingdom:
    def __init__(self):
        self.resources = {'gold': 500, 'food': 300}
        self.hp = 100  # –î–ª—è PvP –±–∏—Ç–≤—ã

def get_or_create_kingdom(user_id):
    if user_id not in kingdoms:
        kingdoms[user_id] = Kingdom()
    return kingdoms[user_id]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    buttons = [
        [InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å NPC", callback_data='attack_menu')],
        [InlineKeyboardButton("‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –∏–≥—Ä–æ–∫–æ–º", callback_data='start_pvp')]
    ]
    return InlineKeyboardMarkup(buttons)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ NPC-–∞—Ç–∞–∫–∏
def attack_menu():
    buttons = [
        [InlineKeyboardButton("–°–ª–∞–±–∞—è –∞—Ä–º–∏—è", callback_data='attack_weak')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è –∞—Ä–º–∏—è", callback_data='attack_medium')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(buttons)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ PvP
def pvp_menu(current_user_id):
    opponents = [uid for uid in kingdoms.keys() if uid != current_user_id]
    if not opponents: return None
    buttons = [[InlineKeyboardButton(f"–ò–≥—Ä–æ–∫ {uid}", callback_data=f"pvp_{uid}")] for uid in opponents]
    return InlineKeyboardMarkup(buttons)

# HP –ø–∞–Ω–µ–ª—å –¥–ª—è PvP
def hp_bar(hp):
    total = 20
    filled = int(max(hp,0) / 100 * total)
    empty = total - filled
    return "üü©" * filled + "‚¨õ" * empty

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    get_or_create_kingdom(user_id)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "main_menu":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

    elif query.data == "attack_menu":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏:", reply_markup=attack_menu())

    elif query.data.startswith("attack_"):
        await process_npc_attack(query, context, user_id, query.data)

    elif query.data == "start_pvp":
        markup = pvp_menu(user_id)
        if markup:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∞—Ç–∞–∫–∏:", reply_markup=markup)
        else:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤!", reply_markup=main_menu())

    elif query.data.startswith("pvp_"):
        defender_id = int(query.data.split("_")[1])
        await start_pvp(query, context, attacker_id=user_id, defender_id=defender_id)

# –§—É–Ω–∫—Ü–∏—è –∞—Ç–∞–∫–∏ –Ω–∞ NPC
async def process_npc_attack(query, context, user_id, attack_type):
    kingdom = get_or_create_kingdom(user_id)
    rewards = {'attack_weak': {'gold': 100, 'food': 50}, 'attack_medium': {'gold': 250, 'food': 120}}
    cost = {'attack_weak': 50, 'attack_medium': 150}

    if kingdom.resources['gold'] < cost[attack_type]:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –∞—Ç–∞–∫–∏!", reply_markup=main_menu())
        return

    kingdom.resources['gold'] -= cost[attack_type]

    battle_gifs = {
        'attack_weak': "https://media.giphy.com/media/QBd2kLB5qDmysEXre9/giphy.gif",
        'attack_medium': "https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif"
    }
    victory_gif = "https://media.giphy.com/media/26tOZ42Mg6pbTUPHW/giphy.gif"
    defeat_gif = "https://media.giphy.com/media/d2lcHJTG5Tscg/giphy.gif"

    battle_msg = await query.message.reply_animation(animation=battle_gifs[attack_type], caption="‚öîÔ∏è –°—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...")
    await asyncio.sleep(3)
    try: await context.bot.delete_message(chat_id=query.message.chat_id, message_id=battle_msg.message_id)
    except: pass

    outcome = random.choice(["win", "lose"])

    if outcome == "win":
        reward = rewards[attack_type]
        kingdom.resources['gold'] += reward['gold']
        kingdom.resources['food'] += reward['food']
        await query.message.reply_animation(animation=victory_gif,
                                           caption=f"üèÜ –ü–æ–±–µ–¥–∞!\nüí∞ +{reward['gold']} –∑–æ–ª–æ—Ç–∞\nüåæ +{reward['food']} –µ–¥—ã")
    else:
        lost_gold = min(100, kingdom.resources['gold'] // 10)
        lost_food = min(50, kingdom.resources['food'] // 10)
        kingdom.resources['gold'] -= lost_gold
        kingdom.resources['food'] -= lost_food
        await query.message.reply_animation(animation=defeat_gif,
                                           caption=f"üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –ü–æ—Ç–µ—Ä–∏:\nüí∞ -{lost_gold} –∑–æ–ª–æ—Ç–∞\nüåæ -{lost_food} –µ–¥—ã")

    await query.message.reply_text("‚öîÔ∏è –ë–∏—Ç–≤–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞:", reply_markup=main_menu())

# PvP –±–∏—Ç–≤–∞ —Å HP –ø–∞–Ω–µ–ª—å—é
async def start_pvp(query, context, attacker_id, defender_id):
    attacker = get_or_create_kingdom(attacker_id)
    defender = get_or_create_kingdom(defender_id)

    try:
        await context.bot.send_message(chat_id=defender_id,
                                       text=f"‚öîÔ∏è –ò–≥—Ä–æ–∫ {attacker_id} –≤—ã–∑–≤–∞–ª –≤–∞—Å –Ω–∞ –±–æ–π!")
    except: pass

    attacker.hp = defender.hp = 100
    battle_round = 1

    battle_msg = await query.message.reply_text(
        f"–†–∞—É–Ω–¥ {battle_round}\n–í—ã: {hp_bar(attacker.hp)} {attacker.hp} HP\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {hp_bar(defender.hp)} {defender.hp} HP\n–ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!"
    )

    while attacker.hp > 0 and defender.hp > 0:
        await asyncio.sleep(2)
        attack_damage = random.randint(10, 25)
        defend_damage = random.randint(8, 20)
        defender.hp -= attack_damage
        attacker.hp -= defend_damage
        battle_round += 1

        await battle_msg.edit_text(
            f"–†–∞—É–Ω–¥ {battle_round}\n–í—ã –Ω–∞–Ω–µ—Å–ª–∏: {attack_damage} —É—Ä–æ–Ω–∞, –ø–æ–ª—É—á–∏–ª–∏: {defend_damage}\n"
            f"–í—ã: {hp_bar(attacker.hp)} {max(attacker.hp,0)} HP\n–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {hp_bar(defender.hp)} {max(defender.hp,0)} HP"
        )

    if attacker.hp > 0:
        gold_stolen = defender.resources['gold']//2
        food_stolen = defender.resources['food']//2
        attacker.resources['gold'] += gold_stolen
        attacker.resources['food'] += food_stolen
        defender.resources['gold'] -= gold_stolen
        defender.resources['food'] -= food_stolen
        await battle_msg.edit_text(battle_msg.text + f"\nüèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\nüí∞ +{gold_stolen} –∑–æ–ª–æ—Ç–∞\nüåæ +{food_stolen} –µ–¥—ã")
        try:
            await context.bot.send_message(chat_id=defender_id,
                                           text=f"üíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞ {attacker_id}.\nüí∞ –ü–æ—Ç–µ—Ä—è–Ω–æ: {gold_stolen} –∑–æ–ª–æ—Ç–∞\nüåæ –ü–æ—Ç–µ—Ä—è–Ω–æ: {food_stolen} –µ–¥—ã")
        except: pass
    else:
        gold_stolen = attacker.resources['gold']//2
        food_stolen = attacker.resources['food']//2
        defender.resources['gold'] += gold_stolen
        defender.resources['food'] += food_stolen
        attacker.resources['gold'] -= gold_stolen
        attacker.resources['food'] -= food_stolen
        await battle_msg.edit_text(battle_msg.text + f"\nüíÄ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!\nüí∞ –ü–æ—Ç–µ—Ä—è–Ω–æ: {gold_stolen} –∑–æ–ª–æ—Ç–∞\nüåæ –ü–æ—Ç–µ—Ä—è–Ω–æ: {food_stolen} –µ–¥—ã")
        try:
            await context.bot.send_message(chat_id=defender_id,
                                           text=f"üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –±–∏—Ç–≤—É –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞ {attacker_id}!\nüí∞ +{gold_stolen} –∑–æ–ª–æ—Ç–∞\nüåæ +{food_stolen} –µ–¥—ã")
        except: pass

    await query.message.reply_text("‚öîÔ∏è –ë–∏—Ç–≤–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(8056012397:AAG7cQuWw38ozN8hCJv8NMH0fyjpbv_zb4E
).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
